buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    classpath "se.transmode.gradle:gradle-docker:$gradle_docker_version"
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

repositories {
  jcenter()
  mavenCentral()
}

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
    resources.srcDir file('src/integrationTest/resources')
  }
}

jar {
  baseName = 'spring-boot-rest-skeleton'
  version = "1.0.${System.getProperty('build.number') ?: 'unspecified'}"
}

group = 'com.aukhatov'
version = jar.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
  project {
    languageLevel = 1.8
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

springBoot {
  buildInfo {
    additionalProperties = [
        by                   : System.properties['user.name'],
        operatingSystem      : System.properties['os.name'] + " " + System.properties['os.version'],
        time: buildTime()
    ]
  }
  mainClass = 'com.aukhatov.rest.Application'
}

def static buildTime() {
  final buildTime = new Date()
  buildTime.format("yyyy-MM-dd HH:mm:ssZ", TimeZone.getTimeZone("Asia/Yekaterinburg"))
}

dependencies {
  // Spring
  compile "org.springframework.boot:spring-boot-starter-actuator:$spring_boot_version"
  compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
  compile "org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version"
  compile "org.springframework.cloud:spring-cloud-starter-sleuth:$spring_boot_sleuth_version"

  compile "com.zaxxer:HikariCP:$hikari_version"
  compile "org.postgresql:postgresql:$postgres_version"


  // Apache libs
  compile "org.apache.commons:commons-lang3:$apache_commons_lang_version"
  compile "commons-io:commons-io:$apache_commons_io_version"

  // Swagger
  compile "io.springfox:springfox-swagger2:$swagger_version"
  compile "io.springfox:springfox-swagger-ui:$swagger_version"

  testCompile "junit:junit:$junit_version"
  testCompile "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
  testCompile "org.springframework.boot:spring-boot-starter-tomcat:$spring_boot_version"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task integrationTest(type: Test, dependsOn: ['integrationTestClasses'], description: 'Run integration tests') {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

task buildDocker(type: Docker, dependsOn: build) {
  applicationName = jar.baseName
  dockerfile = file("${projectDir}/src/main/docker/Dockerfile")
  doFirst {
    copy {
      from jar
      into stageDir
    }
    copy {
      from "${projectDir}/src/main/docker"
      into stageDir
    }
  }
}